(self.webpackChunkstarvie=self.webpackChunkstarvie||[]).push([[833],{5784:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5784,e.exports=t},6214:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>se});var r=n(6720),a=n(7294),o=n(5391),i=n.n(o),l=(0,a.createContext)(null),u=(0,a.createContext)(null),c=n(1508),s=n(6882),m=n(8537),f=n(7210),d=n(9477),p=n(6357);const v={uniforms:{iTime:{type:"f",value:0},iResolution:{type:"v2",value:{x:0,y:0}}},vertexShader:n(3083),fragmentShader:p};s.L.preload("spitfire.gltf");var y=function(e){var t=e.client,n=(0,s.L)("spitfire.gltf"),r=(0,a.useRef)(void 0),o=(0,a.useRef)(),i=(0,f.Ky)(),l=i.size,u=i.viewport,c=new d.Object3D;return(0,a.useEffect)((function(){r.current.material.uniforms.iResolution.value={x:l.width,y:l.height};var e=function(e){r.current.material.uniforms.iTime.value=e.timeElapsed,e.spaceships.forEach((function(e,t){c.position.set(e.p.x*u.width/2,e.p.y*u.height/2,0),c.rotation.set(Math.PI/2+e.r.x,Math.PI+e.r.y,e.r.z),c.scale.set(.1,.1,.1),c.updateMatrix(),o.current.setMatrixAt(t,c.matrix)})),o.current.instanceMatrix.needsUpdate=!0};return t.on("data",e),function(){return t.off("data",e)}}),[]),(0,f.xQ)((function(e){var n=e.mouse,r={mouse:{x:n.x,y:n.y}};t.send(r)})),a.createElement(a.Fragment,null,a.createElement("ambientLight",null),a.createElement("pointLight",{position:[5,5,5]}),a.createElement("mesh",{ref:r,position:[0,0,-1]},a.createElement("planeBufferGeometry",{args:[l.width,l.height]}),a.createElement("shaderMaterial",{attach:"material",args:[v]})),a.createElement("instancedMesh",{ref:o,args:[n.nodes.Spitfire.geometry,n.materials.Texture,4]}),a.createElement(m.j,null))};function h(e){var t=e.client;return a.createElement(f.Xz,null,a.createElement(y,{client:t}))}var g=n(9972),E={secure:!0,host:"starviee-peerjs-server.herokuapp.com",port:443},b=function(){return(0,g._8)({dictionaries:[g.R5],length:1})},x=function(e,t,n){return Math.min(Math.max(e,t),n)};function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var S=Math.PI/8;function P(e){var t,n,r,o,i=e.host,l={players:new Map},u=(0,a.useRef)({timeElapsed:0,steps:0,spaceships:[]});return(0,a.useEffect)((function(){var e=function(e){return e.on("data",(function(t){return l.players.set(e.peer,t)}))};return null==i||i.on("connection",e),function(){return null==i?void 0:i.off("connection",e)}}),[]),t=function(e){u.current={timeElapsed:u.current.timeElapsed+e,steps:u.current.steps+1,spaceships:Array.from(l.players).map((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[0],o=r[1],i=u.current.spaceships.find((function(e){return e.peer===a}));return i?{peer:a,v:i.v,p:i.p,r:i.r,dP:{x:o.mouse.x-i.p.x,y:o.mouse.y-i.p.y}}:{peer:a,v:{x:0,y:0},p:{x:0,y:0},r:{x:0,y:0,z:0},dP:{x:0,y:0}}})).map((function(e){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){w(e,t,n[t])}))}return e}({},e,{v:{x:x(e.dP.x,-1,1),y:x(e.dP.y,-1,1)}})})).map((function(t){return{peer:t.peer,v:t.v,p:{x:x(t.p.x+t.v.x*e,-1,1),y:x(t.p.y+t.v.y*e,-1,1)},r:{x:0,y:0,z:x(t.r.z+t.v.x/20,-S,S)}}}))},Object.values(i.connections).forEach((function(e){return e[0].send(u.current)}))},n=(0,a.useRef)(void 0),r=(0,a.useRef)(void 0),o=function(e){r.current&&t((e-r.current)/1e3),r.current=e,n.current=requestAnimationFrame(o)},(0,a.useEffect)((function(){return n.current=requestAnimationFrame(o),function(){return cancelAnimationFrame(n.current)}}),[]),null}var O=n(5666),j=n.n(O),A=n(2694),C=n(7440),I=n(3516),k=n(3838),M=n(7645),z=n(7750),R=n(5725),F=n(9986),T=n(6186),U=n(9573),D=n(6011),L=n(3694),_=n(6926),B=n(8732),G=n(6514),J=n(8973),N=n(7109),V=n(2658),q=n(8272),H=n(6867),X=n(6914),$=n(1591),K=n(5499),Q=n(7536);var W=(0,n(5503).ZF)({apiKey:"AIzaSyBhi66Bbok_gBT7LhYd0gnOjXpGQ91bGc0",authDomain:"storie-13b35.firebaseapp.com",projectId:"storie-13b35",storageBucket:"storie-13b35.appspot.com",messagingSenderId:"592331745690",appId:"1:592331745690:web:6732172cdd2dfe46263223",measurementId:"G-V3X61DZG3P"}),Y=(0,$.ad)(W);const ee=(0,$.hJ)(Y,"servers").withConverter({toFirestore:function(e){return e.id,function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,["id"])},fromFirestore:function(e){var t=e.data();return{id:e.id,name:t.name,noPlayers:t.noPlayers,version:t.version}}});function te(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ne(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}function re(){return re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},re.apply(this,arguments)}function ae(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return te(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?te(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var oe="1.0.0";function ie(){var e,t,n,r=ae((0,a.useState)(null),2),o=r[0],s=r[1],m=ae((0,a.useContext)(l),2),f=(m[0],m[1]),d=ae((0,a.useContext)(u),2),p=d[0],v=d[1],y=ae((0,K.Z)(["name"]),2),h=y[0],g=y[1],x=(e=j().mark((function e(t){var n;return j().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(n=new(i())(E)).on("open",(function(){return v(n.connect(t.id))}));case 2:case"end":return e.stop()}}),e)})),t=function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){ne(o,r,a,i,l,"next",e)}function l(e){ne(o,r,a,i,l,"throw",e)}i(void 0)}))},function(e){return t.apply(this,arguments)}),Z=(0,Q.cI)({mode:"all",defaultValues:{name:null!==(n=h.name)&&void 0!==n?n:b()}}),w=Z.handleSubmit,S=Z.register,P=Z.setValue,O=Z.trigger,W=Z.formState,Y=W.isSubmitting,te=W.errors;return(0,a.useEffect)((function(){return(0,$.cf)((0,$.IO)(ee,(0,$.ar)("version","==",oe)),(function(e){return s(e.docs.map((function(e){return e.data()})))}))}),[]),a.createElement(k.Z,{open:!p,fullScreen:!0},a.createElement(M.Z,null,"Starviee Space Shooters - v","1.0.0"),a.createElement(z.Z,null,a.createElement(R.ZP,{container:!0,spacing:2},a.createElement(F.Z,{open:!!p},a.createElement(T.Z,{severity:"success"},"Connected")),a.createElement(R.ZP,{item:!0,xs:8},a.createElement(c.Z,{component:"main",sx:{height:"100vh",overflow:"auto"}},a.createElement(U.Z,{size:"small",stickyHeader:!0},a.createElement(D.Z,null,a.createElement(L.Z,null,a.createElement(_.Z,null,"Host"),a.createElement(_.Z,{align:"right"},"No. Players"),a.createElement(_.Z,{align:"right"},"Join"))),a.createElement(B.Z,null,null==o?void 0:o.map((function(e){return a.createElement(G.Z,{in:!0,key:e.id},a.createElement(L.Z,null,a.createElement(_.Z,null,e.name),a.createElement(_.Z,{align:"right"},e.noPlayers),a.createElement(_.Z,{align:"right"},a.createElement(I.Z,{loading:Y,onClick:w((function(t){return x(e)}))},"Join"))))})),Array(5).fill().map((function(e,t){return a.createElement(G.Z,{in:!o,key:t},a.createElement(L.Z,null,a.createElement(_.Z,null,a.createElement(J.Z,{variant:"text",animation:"wave"})),a.createElement(_.Z,{align:"right"},a.createElement(J.Z,{variant:"text",animation:"wave"})),a.createElement(_.Z,{align:"right"},a.createElement(J.Z,{variant:"rectangular",animation:"wave"},a.createElement(I.Z,{variant:"outlined"},"Join")))))})))))),a.createElement(R.ZP,{item:!0,xs:4},a.createElement(c.Z,{sx:{display:"flex",flexDirection:"column",alignItems:"center",height:"100vh"}},a.createElement(N.Z,{sx:{width:64,height:64,m:1,bgcolor:"primary.main"}},a.createElement(A.Z,{sx:{fontSize:32}})),a.createElement(V.Z,{component:"h1",variant:"h4"},"Starviee"),a.createElement(q.Z,re({margin:"normal",fullWidth:!0,label:"Name",autoComplete:"name"},S("name",{required:!0}),{error:!!te.name,inputProps:{maxLength:12},onChange:function(e){return e.target.value&&g("name",e.target.value)},InputProps:{startAdornment:a.createElement(H.Z,{onClick:function(){var e=b();g("name",e),P("name",e),O("name")}},a.createElement(C.Z,null))},autoFocus:!0})),a.createElement(R.ZP,{container:!0,justifyContent:"flex-start"},a.createElement(X.Z,{variant:"outlined",onClick:w((function(e){return function(e){var t=new(i())(E);t.on("open",(function(n){(0,$.pl)((0,$.JU)(ee,n),{id:n,name:e.name,noPlayers:0,version:oe}),f(t);var r=new(i())(E);r.on("open",(function(){return v(r.connect(t.id))}))}))}(e)})),disabled:!!te.name},"Host")))))))}function le(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ue(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return le(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?le(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ce(){var e=ue((0,a.useContext)(l),1)[0],t=ue((0,a.useContext)(u),2),n=t[0];return t[1],a.createElement(c.Z,{height:"100vh"},e&&a.createElement(P,{host:e}),n&&a.createElement(h,{client:n}),a.createElement(ie,null))}function se(){return a.createElement(l.Provider,{value:(0,a.useState)(null)},a.createElement(u.Provider,{value:(0,a.useState)(null)},a.createElement(r.ZP,null),a.createElement(ce,null)))}},6357:e=>{"use strict";e.exports="uniform vec3 iResolution;\nuniform float iTime;\n\n// Star Nest by Pablo Roman Andrioli\n\n#define iterations 10\n#define formuparam 0.53\n\n#define volsteps 8\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t//get coords and direction\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv.y *= iResolution.y / iResolution.x;\n\tvec3 dir = vec3(uv * zoom, 1.);\n\tfloat time = iTime * speed + .25;\n\n\t//mouse rotation\n\tfloat a1 = .5;\n\tfloat a2 = .8;\n\tmat2 rot1 = mat2(cos(a1), sin(a1), -sin(a1), cos(a1));\n\tmat2 rot2 = mat2(cos(a2), sin(a2), -sin(a2), cos(a2));\n\tdir.xz *= rot1;\n\tdir.xy *= rot2;\n\tvec3 from = vec3(1., .5, 0.5);\n\tfrom += vec3(0., time, -2.);\n\tfrom.xz *= rot1;\n\tfrom.xy *= rot2;\n\n\t//volumetric rendering\n\tfloat s = 0.1, fade = 1.;\n\tvec3 v = vec3(0.);\n\tfor(int r = 0; r < volsteps; r++) {\n\t\tvec3 p = from + s * dir * .5;\n\t\tp = abs(vec3(tile) - mod(p, vec3(tile * 2.))); // tiling fold\n\t\tfloat pa, a = pa = 0.;\n\t\tfor(int i = 0; i < iterations; i++) {\n\t\t\tp = abs(p) / dot(p, p) - formuparam; // the magic formula\n\t\t\ta += abs(length(p) - pa); // absolute sum of average change\n\t\t\tpa = length(p);\n\t\t}\n\t\tfloat dm = max(0., darkmatter - a * a * .001); //dark matter\n\t\ta *= a * a; // add contrast\n\t\tif(r > 6)\n\t\t\tfade *= 1. - dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv += fade;\n\t\tv += vec3(s, s * s, s * s * s * s) * a * brightness * fade; // coloring based on distance\n\t\tfade *= distfading; // distance fading\n\t\ts += stepsize;\n\t}\n\tv = mix(vec3(length(v)), v, saturation); //color adjust\n\tfragColor = vec4(v * .01, 1.);\n}\n\nvoid main() {\n\tmainImage(gl_FragColor, gl_FragCoord.xy);\n}"},3083:e=>{"use strict";e.exports="varying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,