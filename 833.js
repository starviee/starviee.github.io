(self.webpackChunkstarvie=self.webpackChunkstarvie||[]).push([[833],{5784:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5784,e.exports=t},6214:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>ue});var r=n(6720),a=n(7294),o=n(5391),i=n.n(o),l=(0,a.createContext)(null),c=(0,a.createContext)(null),u=n(1508),s=n(6882),m=n(8537),f=n(7210),d=n(9477),v=n(1766),p=n(6357);const g={uniforms:{iTime:{type:"f",value:0},iResolution:{type:"v2",value:{x:0,y:0}}},vertexShader:n(3083),fragmentShader:p};s.L.preload("spitfire.gltf");var h=new v.Howl({src:["space-trivia.mp3"],loop:!0}),y=function(e){var t=e.client,n=(0,s.L)("spitfire.gltf"),r=(0,a.useRef)(),o=(0,a.useRef)(),i=(0,f.Ky)(),l=i.size,c=i.viewport,u=new d.Object3D;return(0,a.useEffect)((function(){r.current.material.uniforms.iResolution.value={x:l.width,y:l.height};var e=function(e){r.current.material.uniforms.iTime.value=e.t,e.sps.forEach((function(e,t){u.position.set(e.p.x*c.width/2,e.p.y*c.height/2,0),u.rotation.set(Math.PI/2+e.r.x,Math.PI+e.r.y,e.r.z),u.scale.set(.1,.1,.1),u.updateMatrix(),o.current.setMatrixAt(t,u.matrix)})),o.current.instanceMatrix.needsUpdate=!0};return t.on("data",e),h.play(),function(){t.off("data",e),h.stop()}}),[]),(0,f.xQ)((function(e){var n=e.mouse,r={m:{x:n.x,y:n.y}};t.send(r)})),a.createElement(a.Fragment,null,a.createElement("ambientLight",null),a.createElement("pointLight",{position:[5,5,5]}),a.createElement("mesh",{ref:r,position:[0,0,-1]},a.createElement("planeBufferGeometry",{args:[l.width,l.height]}),a.createElement("shaderMaterial",{attach:"material",args:[g]})),a.createElement("instancedMesh",{ref:o,args:[n.nodes.Spitfire.geometry,n.materials.Texture,4]}),a.createElement(m.j,null))};function E(e){var t=e.client;return a.createElement(f.Xz,null,a.createElement(y,{client:t}))}var x=n(9842),b=n(9972),Z={secure:!0,host:"starviee-peerjs-server.herokuapp.com",port:443},w=function(){return(0,b._8)({dictionaries:[b.R5],length:1})};function S(e){var t,n,r,o,i=e.host,l=(0,a.useRef)({t:0,n:0,sps:[]}),c=[],u=x.Engine.create();return(0,a.useEffect)((function(){var e=function(e){var t=x.Bodies.rectangle(-.1,-.2,.2,.4);c.push(t),x.World.add(u.world,[t]),e.on("data",(function(e){return x.Body.setVelocity(t,{x:.01*(e.m.x-t.position.x),y:.01*(e.m.y-t.position.y)})}))};return i.on("connection",e),function(){return i.off("connection",e)}}),[]),t=function(e){x.Engine.update(u,e),l.current={t:l.current.t+e,n:l.current.n+1,sps:c.map((function(e){return{p:{x:e.position.x,y:e.position.y},r:{x:0,y:0,z:0}}}))};var t=i.connections;Object.values(t).forEach((function(e){return e[0].send(l.current)}))},n=(0,a.useRef)(void 0),r=(0,a.useRef)(void 0),o=function(e){r.current&&t((e-r.current)/1e3),r.current=e,n.current=requestAnimationFrame(o)},(0,a.useEffect)((function(){return n.current=requestAnimationFrame(o),function(){return cancelAnimationFrame(n.current)}}),[]),null}var C=n(5666),P=n.n(C),O=n(2694),j=n(7440),k=n(3516),A=n(3838),I=n(7645),z=n(7750),R=n(5725),M=n(9986),F=n(6186),T=n(9573),U=n(6011),B=n(3694),L=n(6926),_=n(8732),D=n(6514),G=n(8973),J=n(7109),N=n(2658),V=n(8272),H=n(6867),q=n(6914),X=n(1591),K=n(5499),Q=n(7536);var W=(0,n(5503).ZF)({apiKey:"AIzaSyBhi66Bbok_gBT7LhYd0gnOjXpGQ91bGc0",authDomain:"storie-13b35.firebaseapp.com",projectId:"storie-13b35",storageBucket:"storie-13b35.appspot.com",messagingSenderId:"592331745690",appId:"1:592331745690:web:6732172cdd2dfe46263223",measurementId:"G-V3X61DZG3P"}),$=(0,X.ad)(W);const Y=(0,X.hJ)($,"servers").withConverter({toFirestore:function(e){return e.id,function(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}(e,["id"])},fromFirestore:function(e){var t=e.data();return{id:e.id,name:t.name,noPlayers:t.noPlayers,version:t.version}}});function ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function te(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}function ne(){return ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne.apply(this,arguments)}function re(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var ae="1.0.0";function oe(){var e,t,n,r=re((0,a.useState)(null),2),o=r[0],s=r[1],m=re((0,a.useContext)(l),2),f=(m[0],m[1]),d=re((0,a.useContext)(c),2),v=d[0],p=d[1],g=re((0,K.Z)(["name"]),2),h=g[0],y=g[1],E=(e=P().mark((function e(t){var n;return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(n=new(i())(Z)).on("open",(function(){return p(n.connect(t.id))}));case 2:case"end":return e.stop()}}),e)})),t=function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){te(o,r,a,i,l,"next",e)}function l(e){te(o,r,a,i,l,"throw",e)}i(void 0)}))},function(e){return t.apply(this,arguments)}),x=(0,Q.cI)({mode:"all",defaultValues:{name:null!==(n=h.name)&&void 0!==n?n:w()}}),b=x.handleSubmit,S=x.register,C=x.setValue,W=x.trigger,$=x.formState,ee=$.isSubmitting,oe=$.errors;return(0,a.useEffect)((function(){return(0,X.cf)((0,X.IO)(Y,(0,X.ar)("version","==",ae)),(function(e){return s(e.docs.map((function(e){return e.data()})))}))}),[]),a.createElement(A.Z,{open:!v,fullScreen:!0},a.createElement(I.Z,null,"Starviee Space Shooters - v","1.0.0"),a.createElement(z.Z,null,a.createElement(R.ZP,{container:!0,spacing:2},a.createElement(M.Z,{open:!!v},a.createElement(F.Z,{severity:"success"},"Connected")),a.createElement(R.ZP,{item:!0,xs:8},a.createElement(u.Z,{component:"main",sx:{height:"100vh",overflow:"auto"}},a.createElement(T.Z,{size:"small",stickyHeader:!0},a.createElement(U.Z,null,a.createElement(B.Z,null,a.createElement(L.Z,null,"Host"),a.createElement(L.Z,{align:"right"},"No. Players"),a.createElement(L.Z,{align:"right"},"Join"))),a.createElement(_.Z,null,null==o?void 0:o.map((function(e){return a.createElement(D.Z,{in:!0,key:e.id},a.createElement(B.Z,null,a.createElement(L.Z,null,e.name),a.createElement(L.Z,{align:"right"},e.noPlayers),a.createElement(L.Z,{align:"right"},a.createElement(k.Z,{loading:ee,onClick:b((function(t){return E(e)}))},"Join"))))})),Array(5).fill().map((function(e,t){return a.createElement(D.Z,{in:!o,key:t},a.createElement(B.Z,null,a.createElement(L.Z,null,a.createElement(G.Z,{variant:"text",animation:"wave"})),a.createElement(L.Z,{align:"right"},a.createElement(G.Z,{variant:"text",animation:"wave"})),a.createElement(L.Z,{align:"right"},a.createElement(G.Z,{variant:"rectangular",animation:"wave"},a.createElement(k.Z,{variant:"outlined"},"Join")))))})))))),a.createElement(R.ZP,{item:!0,xs:4},a.createElement(u.Z,{sx:{display:"flex",flexDirection:"column",alignItems:"center",height:"100vh"}},a.createElement(J.Z,{sx:{width:64,height:64,m:1,bgcolor:"primary.main"}},a.createElement(O.Z,{sx:{fontSize:32}})),a.createElement(N.Z,{component:"h1",variant:"h4"},"Starviee"),a.createElement(V.Z,ne({margin:"normal",fullWidth:!0,label:"Name",autoComplete:"name"},S("name",{required:!0}),{error:!!oe.name,inputProps:{maxLength:12},onChange:function(e){return e.target.value&&y("name",e.target.value)},InputProps:{startAdornment:a.createElement(H.Z,{onClick:function(){var e=w();y("name",e),C("name",e),W("name")}},a.createElement(j.Z,null))},autoFocus:!0})),a.createElement(R.ZP,{container:!0,justifyContent:"flex-start"},a.createElement(q.Z,{variant:"outlined",onClick:b((function(e){return function(e){var t=new(i())(Z);t.on("open",(function(n){(0,X.pl)((0,X.JU)(Y,n),{id:n,name:e.name,noPlayers:0,version:ae}),f(t);var r=new(i())(Z);r.on("open",(function(){return p(r.connect(t.id))}))}))}(e)})),disabled:!!oe.name},"Host")))))))}function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function le(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ie(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ce(){var e=le((0,a.useContext)(l),1)[0],t=le((0,a.useContext)(c),2),n=t[0];return t[1],a.createElement(u.Z,{height:"100vh"},e&&a.createElement(S,{host:e}),n&&a.createElement(E,{client:n}),a.createElement(oe,null))}function ue(){return a.createElement(l.Provider,{value:(0,a.useState)(null)},a.createElement(c.Provider,{value:(0,a.useState)(null)},a.createElement(r.ZP,null),a.createElement(ce,null)))}},6357:e=>{"use strict";e.exports="uniform vec3 iResolution;\nuniform float iTime;\n\n// Star Nest by Pablo Roman Andrioli\n\n#define iterations 10\n#define formuparam 0.53\n\n#define volsteps 8\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t//get coords and direction\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv.y *= iResolution.y / iResolution.x;\n\tvec3 dir = vec3(uv * zoom, 1.);\n\tfloat time = iTime * speed + .25;\n\n\t//mouse rotation\n\tfloat a1 = .5;\n\tfloat a2 = .8;\n\tmat2 rot1 = mat2(cos(a1), sin(a1), -sin(a1), cos(a1));\n\tmat2 rot2 = mat2(cos(a2), sin(a2), -sin(a2), cos(a2));\n\tdir.xz *= rot1;\n\tdir.xy *= rot2;\n\tvec3 from = vec3(1., .5, 0.5);\n\tfrom += vec3(0., time, -2.);\n\tfrom.xz *= rot1;\n\tfrom.xy *= rot2;\n\n\t//volumetric rendering\n\tfloat s = 0.1, fade = 1.;\n\tvec3 v = vec3(0.);\n\tfor(int r = 0; r < volsteps; r++) {\n\t\tvec3 p = from + s * dir * .5;\n\t\tp = abs(vec3(tile) - mod(p, vec3(tile * 2.))); // tiling fold\n\t\tfloat pa, a = pa = 0.;\n\t\tfor(int i = 0; i < iterations; i++) {\n\t\t\tp = abs(p) / dot(p, p) - formuparam; // the magic formula\n\t\t\ta += abs(length(p) - pa); // absolute sum of average change\n\t\t\tpa = length(p);\n\t\t}\n\t\tfloat dm = max(0., darkmatter - a * a * .001); //dark matter\n\t\ta *= a * a; // add contrast\n\t\tif(r > 6)\n\t\t\tfade *= 1. - dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv += fade;\n\t\tv += vec3(s, s * s, s * s * s * s) * a * brightness * fade; // coloring based on distance\n\t\tfade *= distfading; // distance fading\n\t\ts += stepsize;\n\t}\n\tv = mix(vec3(length(v)), v, saturation); //color adjust\n\tfragColor = vec4(v * .01, 1.);\n}\n\nvoid main() {\n\tmainImage(gl_FragColor, gl_FragCoord.xy);\n}"},3083:e=>{"use strict";e.exports="varying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,